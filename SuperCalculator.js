describe('Калькулятор', function() {    function doComputing(firstArg, secondArg, operator) {        element( by.model('first') ).sendKeys( firstArg );        element( by.model('second') ).sendKeys( secondArg );        element(by.cssContainingText('option', operator)).click();        $('#gobutton').click();    }    browser.get('http://juliemr.github.io/protractor-demo/');    describe('должен уметь выполнять арифметическую операцию', function() {        var computingResult = element(by.binding('latest'));        it('сложения чисел', function() {            doComputing('6', '5', '+');            expect( computingResult.getText() ).toEqual('11');        });        it('вычитания чисел', function() {            doComputing('14', '8', '-');            expect( computingResult.getText() ).toEqual('6');        });        it('умножения чисел', function() {            doComputing('3', '7', '*');            expect( computingResult.getText() ).toEqual('21');        });        it('деления чисел', function() {            doComputing('24', '3', '/');            expect( computingResult.getText() ).toEqual('8');        });    });    it('должен иметь заголовок "Super Calculator"', function() {        expect( $('h3').getText() ).toEqual('Super Calculator');    });        describe('должен добавлять в историю информацию о вычислениях: ', function() {        var historyEntries = element.all( by.repeater('result in memory') );                it('при первом вычислении, общее количество записей в истории должно ровняться 1', function() {            browser.get('http://juliemr.github.io/protractor-demo/');            doComputing('4', '5', '+');            expect( historyEntries.count() ).toEqual(1);        });                it('при втором вычислении, общее количество записей в истории должно ровняться 2', function() {            doComputing('7', '4', '*');            expect( historyEntries.count() ).toEqual(2);        });    });});